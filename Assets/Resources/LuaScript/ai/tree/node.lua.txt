--BTNode：所有节点的base class。定义了一些节点的基本功能，并提供一些可继承的函数。
--
--BTAction：行为节点，继承于BTNode。具体的游戏逻辑应该放在这个节点里面。
--
--BTPrecondition：节点的准入条件，每一个BTNode都会有一个。具体的游戏逻辑判断可以继承于它。
--
--BTPrioritySelector：Priority Selector逻辑节点，继承于BTNode。每次执行，先有序地遍历子节点，然后执行符合准入条件的第一个子结点。可以看作是根据条件来选择一个子结点的选择器。
--
--BTSequence：Sequence逻辑节点，继承于BTNode。每次执行，有序地执行各个子结点，当一个子结点结束后才执行下一个。严格按照节点A、B、C的顺序执行，当最后的行为C结束后，BTSequence结束。
--
--BTParallel：Parallel逻辑节点，继承于BTNode。同时执行各个子结点。每当任一子结点的准入条件失败，它就不会执行。
--
--BTParallelFlexible：Parallel的一个变异，继承于BTNode。同时执行各个子节点。当所有子结点的准入条件都失败，它就不会执行。

---@class Node
local Node = class("Node")

---@class TreeState
TreeState = {
    success = 1,
    failure = 2,
    running = 3,
}

function Node:ctor()
    self.name = ""
    ---@type Node[]
    self._childs = {}
    ---@type Node
    self._parent = nil
    ---@type Condition
    self._precondition = nil
end

---@param node Node
function Node:addChild(node)
    table.insert(self._childs, node)
    node:setParent(self)
end

---这个应该是被动调用函数，调用addChild的时候调用这个
---@param node Node
function Node:setParent(node)
    self._parent = node
end

---@return Node
function Node:getChildByName(name)

end

---@param index number
function Node:removeChild(index)

end

function Node:check()
    if not self._precondition then
        return true
    end
end

---这里的obj应该包含了当前战斗系统中所有ai可以利用的资源，或者说可见的资源
---@return number 各个值的意义：这里本质上就是返回的TreeState
function Node:exec(obj)
    if self:check() then
        
    end
    return TreeState.success
end

return Node