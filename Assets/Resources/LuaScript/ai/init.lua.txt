---这个就是通过xlua动态生成的ai实现类
---@class AI
local M = util.class("AI")
M.id = -1			---ai的id为负值
M.name = "Robot"	---ai的名称，这里会从ai的名称库中随机出一个名称

---感觉ai可以这样做
---在配置文件中给出几幅卡组
---每次创建ai的时候根据

---AI的行为可以根据配置表来进行
---这里给出一定的

---Ai的行为与玩家的行为一样
---		控制棋子发动攻击
---		召唤一枚棋子
---		结束当前回合
---		抽取棋子
---		使用棋子技能

---轮到ai的回合时，ai调用Tick函数
---AI执行一次操作
---每次轮到这个ai行动的时候调用
function M:Tick()
	---由cpp端导出一个函数，按照ai的行为执行整个操作
	---包含 抽取所有的卡牌
	---		召唤所有能召唤的卡牌
	---		所有的卡牌使用技能(主要是技能的目标要怎么去选择)
	---		所有卡牌发动攻击
	
	---这样做的目的是，以后可以通过导出其他api的方式，在lua端做出更好的ai控制
	---但是目前就只实现一个简单的方式来完成ai的行为控制
	
	---包含 抽取所有的卡牌
	---		召唤所有能召唤的卡牌
	---		所有的卡牌使用技能(主要是技能的目标要怎么去选择)
	---		所有卡牌发动攻击
	
	---这样去做的话，就需要ai可以自行判断是否能抽卡，是否能够召唤卡牌、哪些位置上能够召唤卡牌
	---哪些棋子能够使用技能、哪些棋子能够发动攻击
	---还有技能的目标要怎么样选择
end

---ai初始化
function M:Create()
	
end

return M