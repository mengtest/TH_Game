--- 注意，这个文件是声明文件，不要使用任何方式来加载这个文件


---project no name名称空间，这里存放所有C++导出lua的全局函数，所有的导出类都不受这个影响
---@class NN
local projNN = {}

---日志文件输出
---@param str string
function projNN.log(str) end

---声明一个类
---...中传入参数为父类列表
---@param str string 类型名
---@return table
function projNN.class(str, ...) end

---@return Combat
function projNN.get_combat(combatId) end

---@return number
function projNN.create_combat() end

---@class Pawn
local pawn = {

}

---@class BuffMachine
local buffMachine = {

}

---@class IBuff
local iBuff = {

}

---@class Skill
local skill = {

}

---@class Player
local player = {

}

---@class TurnState 这个其实就是枚举类型
---@field invalid number
---@field prepare number
---@field start number
---@field battle number
---@field over number
local turnState = {}

---@class Damage
---@field isHeal boolean 是否是治疗
---@field value number  治疗或者伤害的数值
---@field curValue number   当前治疗或者伤害的数值
---@field damageType number 伤害的类型
---@field curDamageType number 当前的伤害类型
---@field source Pawn   伤害的来源
---@field target Pawn   伤害的目标
local damage = {
    new = function(isHeal, value, damageType, source, target)
        ---@type Damage
        local s = nil
        return s
    end
}

---@class Combat
local combat = {

}

---Pawn的声明
local function pawn_fold()
    ---@return number
    function pawn:id() end

    ---@return number
    function pawn:unique_id() end

    ---@return number
    function pawn:hp() end

    ---@return number
    function pawn:mp() end

    ---@return number
    function pawn:matk() end

    ---@return number
    function pawn:atk() end

    ---@return number
    function pawn:def() end

    ---@return number
    function pawn:mdef() end

    ---@return number
    function pawn:getBuffSize() end

    ---@return IBuff
    ---@param index number
    function pawn:getBuffByIndex(index) end

    ---@return IBuff
    ---@param uid number
    function pawn:getBuffByUid(uid) end

    ---@return number
    ---@param id number
    function pawn:getBuffById(id) end

    ---@return boolean
    ---@param uid number
    function pawn:containBuff(uid) end

    ---@return boolean
    ---@param id number
    function pawn:hasSkill(id) end

    ---@return Player
    function pawn:getOwner() end

    -- -@param player Player
    -- function pawn:addTo(player) end

    ---@return number
    function pawn:posType() end

    ---@return number
    function pawn:pos() end

    ---@return boolean
    function pawn:moveToHand() end

    ---@return boolean
    function pawn:moveToDeck() end

    ---@param pos number
    ---@return boolean
    function pawn:moveToPanel(pos) end

    ---@param buf IBuff
    ---@return number
    function pawn:mount(buf) end

    ---@param uid number
    ---@return number
    function pawn:unmount(uid) end

    ---@return number
    ---@param damage Damage
    function pawn:hit(damage) end

    ---@return number
    ---@param player Player
    ---@return boolean
    function pawn:attack(player) end

    ---@return number
    ---@param pawn Pawn
    ---@return boolean
    function pawn:attack(pawn) end

    ---@return boolean
    ---@param target Pawn
    ---@param skillId number
    function pawn:useSkill(target, skillId) end

    ---@return boolean
    ---@param target Pawn
    ---@param skillId number
    function pawn:useSkillWithCost(target, skillId) end

    ---@return number
    ---@param damage Damage
    function pawn:heal(damage) end

    function pawn:reset() end

    ---@return boolean
    ---@param priority number 默认为100
    function pawn:dead(priority) end

    ---@param type number 消耗的类型
    ---@param value number 消耗的值
    function pawn:cost(type, value) end

    ---@param type number 消耗的类型
    ---@param value number 消耗的值
    ---@return boolean
    function pawn:check(type, value) end

    ---@return boolean
    function pawn:alive() end

    ---@param actionType number 操作的类型
    ---@return boolean
    function pawn:checkAction(actionType) end

    -- function pawn:plus(type, value) end

    -- function pawn:minus(type, value) end

    -- function pawn:to(type, value) end

    function pawn:opHp(value) end

    function pawn:opMp(value) end

    function pawn:opAtk(value) end

    function pawn:opMatk(value) end

    function pawn:opDef(value) end

    function pawn:opMdef(value) end

    ---当前棋子触发了攻击的动作
    ---还没有实现的api，需要实现后并导出这个api
    function pawn:attack() end
end

---Player的声明
local function player_fold()
    ---@return number
    function player:uid() end

    ---@return number
    function player:gold() end

    ---@return number
    function player:maxEnergy() end

    ---@return number
    function player:energy() end

    ---@return number
    function player:hp() end

    ---@return number
    function player:getMaxCombatPawnNumber() end

    ---@return number
    function player:getHandPawnNumber() end

    ---@return number
    function player:getDeckPawnNumber() end

    ---@param type number
    ---@param value number
    ---@return boolean
    function player:check(type, value) end

    ---@param index number
    ---@return Pawn
    function player:getCombatPawnByIndex(index) end

    ---@param inded  number
    ---@return Pawn
    function player:getHandPawnByIndex(index) end

    ---@param id number
    ---@return boolean
    function player:hasPawn(id) end

    ---@param uid number
    ---@return boolean
    function player:hasPawnUid(uid) end

    ---@return number
    function player:combatId() end

    ---@param num number
    ---@param high boolean
    ---@return boolean
    function player:draw(num, high) end

    function player:turnEnd() end

    ---@param pawnUid number
    ---@param pos number
    function player:summon(pawnUid, pos) end

    ---@return boolean
    function player:recover(pawnUid) end

    ---@param damage number
    function player:hit(damage) end

    -- ---@param type number
    -- ---@param value number
    -- function player:plus(type, value) end

    -- ---@param type number
    -- ---@param value number
    -- function player:minus(type, value) end

    -- ---@param type number
    -- ---@param value number
    -- function player:to(type, value) end

    function player:opHp(value) end

    function player:opEnergy(value) end

    function player:opMaxEnergy(value) end

    function player:opGold(value) end

    ---@return Combat
    function player:getCombat() end
end

---Combat的声明
local function combat_fold()
    ---@return number
    function combat:id() end

    ---@param uid number
    ---@return boolean
    function combat:hasPlayer(uid) end

    ---@param uid number
    ---@return Player
    function combat:getPlayer(uid) end

    ---@param uid number
    ---@return Pawn
    function combat:getPawnByUid(uid) end

    ---@param id number 点击结束回合按钮的玩家id
    function combat:turnEnd(id) end

    ---@return boolean
    function combat:start() end

    ---@return boolean
    function combat:over() end

    ---@param player Player
    ---@return Player
    function combat:getEnemy(player) end

    ---@return Player
    function combat:getWorkPlayer() end

    ---@return Player
    function combat:getNextPlayer() end

    ---@return TurnState
    function combat:getCurState() end

    ---@return number
    function combat:getCurTurn() end

    ---@return BuffMachine
    function combat:getMachine() end
end

---BuffMachine的声明
local function buff_machine_fold()
    ---@param pawn Pawn
    ---@param id number
    ---@return IBuff
    function buffMachine:create(pawn, id) end

    ---@param player Player
    function buffMachine:executeAll(player) end

    ---@return number
    function buffMachine:getRoomId() end

    ---@return Combat
    function buffMachine:getBindRoom() end

    ---@param uid number
    ---@return IBuff
    function buffMachine:getBuffByUid(uid) end

    ---@param ibuff IBuff
    function buffMachine:buffExecute(ibuff) end

    ---@param buffId number
    function buffMachine:buffExecute(buffId) end

    ---@param pawnId number
    ---@return number
    function buffMachine:getBuffLength(pawnId) end

    ---@param type number
    ---@return number
    function buffMachine:getBuffLengthByType(type) end
end

local function damage_fold()

end

local function buff_fold()
    function iBuff:reset() end

    ---@return BuffMachine
    function iBuff:getMachine() end

    ---@return number
    function iBuff:id() end

    ---@return number
    function iBuff:unique_id() end

    ---@return number
    function iBuff:maxTime() end

    ---@return number
    function iBuff:restTime() end

    ---@return number
    function iBuff:targetId() end

    ---@return number
    function iBuff:sourcePawn() end

    ---@return number
    function iBuff:damage() end

    ---@return number
    function iBuff:damageType() end

    ---@return number
    function iBuff:maxOverlay() end

    function iBuff:callOverlay() end

    ---@return number
    function iBuff:baseType() end

    ---@return boolean
    ---@param ibuff IBuff
    function iBuff:test(ibuff) end

    ---@return number
    function iBuff:overlay() end

    ---@return Pawn
    function iBuff:getOwner() end

    ---@return Pawn
    function iBuff:getSource() end
end

---@type Pawn
Pawn = Pawn or pawn

---@type BuffMachine
BuffMachine = BuffMachine or buffMachine

---@type IBuff
IBuff = IBuff or iBuff

---@type Skill
Skill = Skill or skill

---@type TurnState
TurnState = TurnState or turnState

---@type Damage
Damage = Damage or damage

---@type Combat
Combat = Combat or combat

---@type NN
nn = nn or projNN

-- return nn

-- -- local b = pawn:getOwner():getCombat():getMachine():create(pawn, 1)
-- -- pawn:mount(b)
-- local buff = pawn:getOwner():getCombat():getMachine():create(pawn, 1)
-- pawn:mount(buff)
