local M = {}

local queryCard = require"modules.BattleScene.QueryCard"
local drawAndGold = require"modules.BattleScene.DrawAndGold"

---战斗场景应该具有的功能
---     异步加载(当场景中所有需要的数据全部加载完成的时候，发送消息给服务端，然后等待所有的客户端都加载完成之后，服务端发送消息，所有的客户端进入战斗场景)
---     

---这个是玩家点击左上角的设置按钮后的逻辑
---应该弹出一个ui，这个ui里面可以调整当前游戏里面的一些设置
---@param this UnityEngine.Transform
local function Setting(this)
    util.bindButtonCallback(this, function ()
        log("您点击了设置按钮")
    end)
end

local list = {
    --QueryCard = queryCard,
    DrawAndGold = drawAndGold,
    Setting = Setting
}

---@param data number[]
function M.init(data)
    ---这一块只做视图相关的处理，以及玩家输入后对combat的调用
    GamePlay = GamePlay or require"gameplay.init"
    GamePlay.create("default")
    
    ---@type DefaultGamePlay
    local gamePlay = GamePlay.cur()
    if global.deckCards then
        ---加载当前玩家所有的卡牌、资源等
        gamePlay:start(global.deckCards)
        ---加载完毕后显示等待其他玩家中  x/x的字样
        ---所有玩家都加载完之后就移除掉

        local t = CS.LuaApi.GetPlayer(1, 1)
        print(t.uid)
        for i = 0, 49 do
            print(t.pawns[i])
        end
    else
        --error"无效的卡牌数据"
    end
    
    

	require"modules.BattleScene.userInputLayer".init()
	require"modules.BattleScene.fGUICombat".init()
    
    --if nn then
    --    nn.create_combat()
    --end
	
    ---离开场景的时候界面中要用到的数据会保留下来，但是ui会被销毁，下次再使用的时候再创建出来
    util.loadChild(CS.Global.GetCurCanvas().transform, list)
    
    ---以前检测的到卡牌，现在检测不到，很难受
    ---所有的卡牌的点击事件
    ---CS.Lib.Listener.Instance:On(CS.Lib.Listener.MOUSE_EVENT, function (a, b, c)
    ---    ---@type UnityEngine.RaycastHit
    ---    local isHit, hit = a:ExplicitRayHit()
    ---        ---- log("123123123")
    ---    if isHit then
    ---        ---判断当前点击的卡牌是否是自己的卡牌，如果是自己的卡牌，则会触发攻击相关的操作
    ---        ---如果不是自己的卡牌，则没有任何提示
    ---        ---如果持续点击对应的卡牌，则会显示当前卡牌的详细信息
    ---        if hit then
    ---            log(hit.transform.name)
    ---        end
    ---    end
    ---end, nil, CS.Lib.KeyCode.Mouse0, false)
end

return M