using XLua;

namespace Test
{
    // Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    [LuaCallCSharp()]
    [CSharpCallLua()]
    public partial class CardInfo
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("name_cn", NullValueHandling = NullValueHandling.Ignore)]
        public string NameCn { get; set; }

        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("img")]
        public string Img { get; set; }

        [JsonProperty("hp")]
        public long Hp { get; set; }

        [JsonProperty("mp")]
        public long Mp { get; set; }

        [JsonProperty("atk")]
        public long Atk { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("grow_hp")]
        public long GrowHp { get; set; }

        [JsonProperty("grow_mp")]
        public long GrowMp { get; set; }

        [JsonProperty("grow_atk")]
        public long GrowAtk { get; set; }

        [JsonProperty("skill1")]
        public long Skill1 { get; set; }

        [JsonProperty("skill2")]
        public long Skill2 { get; set; }

        [JsonProperty("skill3")]
        public long Skill3 { get; set; }

        [JsonProperty("skill4")]
        public long Skill4 { get; set; }

        [JsonProperty("skill5")]
        public long Skill5 { get; set; }
    }

    public partial class CardInfo
    {
        public static CardInfo[] FromJson(string json) => JsonConvert.DeserializeObject<CardInfo[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CardInfo[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
}