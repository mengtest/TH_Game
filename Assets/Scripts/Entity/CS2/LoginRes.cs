// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LoginRes.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from LoginRes.proto</summary>
public static partial class LoginResReflection {

  #region Descriptor
  /// <summary>File descriptor for LoginRes.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static LoginResReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5Mb2dpblJlcy5wcm90byKvAQoITG9naW5SZXMSCwoDcmVzGAEgASgIEgsK",
          "A3VpZBgCIAEoBRIQCghuaWNrbmFtZRgDIAEoCRILCgNtc2cYBCABKAkSDQoF",
          "bGV2ZWwYBSABKAUSCwoDZXhwGAYgASgFEg4KBm1heEV4cBgHIAEoBRIMCgRn",
          "b2xkGAggASgFEg8KB2NyeXN0YWwYCSABKAUSDQoFcG93ZXIYCiABKAUSEAoI",
          "bWF4UG93ZXIYCyABKAViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginRes), global::LoginRes.Parser, new[]{ "Res", "Uid", "Nickname", "Msg", "Level", "Exp", "MaxExp", "Gold", "Crystal", "Power", "MaxPower" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class LoginRes : pb::IMessage<LoginRes> {
  private static readonly pb::MessageParser<LoginRes> _parser = new pb::MessageParser<LoginRes>(() => new LoginRes());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LoginResReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRes(LoginRes other) : this() {
    res_ = other.res_;
    uid_ = other.uid_;
    nickname_ = other.nickname_;
    msg_ = other.msg_;
    level_ = other.level_;
    exp_ = other.exp_;
    maxExp_ = other.maxExp_;
    gold_ = other.gold_;
    crystal_ = other.crystal_;
    power_ = other.power_;
    maxPower_ = other.maxPower_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRes Clone() {
    return new LoginRes(this);
  }

  /// <summary>Field number for the "res" field.</summary>
  public const int ResFieldNumber = 1;
  private bool res_;
  /// <summary>
  ///是否登入成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Res {
    get { return res_; }
    set {
      res_ = value;
    }
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 2;
  private int uid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Uid {
    get { return uid_; }
    set {
      uid_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  /// <summary>
  ///登入成功后会传入当前账号的nickname
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 4;
  private string msg_ = "";
  /// <summary>
  ///登入成功或者失败后在ui中显示的一句话
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 5;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 6;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "maxExp" field.</summary>
  public const int MaxExpFieldNumber = 7;
  private int maxExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxExp {
    get { return maxExp_; }
    set {
      maxExp_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 8;
  private int gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "crystal" field.</summary>
  public const int CrystalFieldNumber = 9;
  private int crystal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Crystal {
    get { return crystal_; }
    set {
      crystal_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 10;
  private int power_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  /// <summary>Field number for the "maxPower" field.</summary>
  public const int MaxPowerFieldNumber = 11;
  private int maxPower_;
  /// <summary>
  ///int32 code = 12;    //错误代码，只有当res为false时才有这个字段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxPower {
    get { return maxPower_; }
    set {
      maxPower_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Res != other.Res) return false;
    if (Uid != other.Uid) return false;
    if (Nickname != other.Nickname) return false;
    if (Msg != other.Msg) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (MaxExp != other.MaxExp) return false;
    if (Gold != other.Gold) return false;
    if (Crystal != other.Crystal) return false;
    if (Power != other.Power) return false;
    if (MaxPower != other.MaxPower) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Res != false) hash ^= Res.GetHashCode();
    if (Uid != 0) hash ^= Uid.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (MaxExp != 0) hash ^= MaxExp.GetHashCode();
    if (Gold != 0) hash ^= Gold.GetHashCode();
    if (Crystal != 0) hash ^= Crystal.GetHashCode();
    if (Power != 0) hash ^= Power.GetHashCode();
    if (MaxPower != 0) hash ^= MaxPower.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Res != false) {
      output.WriteRawTag(8);
      output.WriteBool(Res);
    }
    if (Uid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Uid);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Msg);
    }
    if (Level != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Exp);
    }
    if (MaxExp != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(MaxExp);
    }
    if (Gold != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Gold);
    }
    if (Crystal != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Crystal);
    }
    if (Power != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Power);
    }
    if (MaxPower != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(MaxPower);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Res != false) {
      size += 1 + 1;
    }
    if (Uid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (MaxExp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxExp);
    }
    if (Gold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
    }
    if (Crystal != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Crystal);
    }
    if (Power != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
    }
    if (MaxPower != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPower);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginRes other) {
    if (other == null) {
      return;
    }
    if (other.Res != false) {
      Res = other.Res;
    }
    if (other.Uid != 0) {
      Uid = other.Uid;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.MaxExp != 0) {
      MaxExp = other.MaxExp;
    }
    if (other.Gold != 0) {
      Gold = other.Gold;
    }
    if (other.Crystal != 0) {
      Crystal = other.Crystal;
    }
    if (other.Power != 0) {
      Power = other.Power;
    }
    if (other.MaxPower != 0) {
      MaxPower = other.MaxPower;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Res = input.ReadBool();
          break;
        }
        case 16: {
          Uid = input.ReadInt32();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 34: {
          Msg = input.ReadString();
          break;
        }
        case 40: {
          Level = input.ReadInt32();
          break;
        }
        case 48: {
          Exp = input.ReadInt32();
          break;
        }
        case 56: {
          MaxExp = input.ReadInt32();
          break;
        }
        case 64: {
          Gold = input.ReadInt32();
          break;
        }
        case 72: {
          Crystal = input.ReadInt32();
          break;
        }
        case 80: {
          Power = input.ReadInt32();
          break;
        }
        case 88: {
          MaxPower = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
